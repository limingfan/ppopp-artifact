#include <stdio.h>
#include "cuda.h"
#define max(x,y)  ((x) > (y)? (x) : (y))
#define min(x,y)  ((x) < (y)? (x) : (y))
#define ceil(a,b) ((a) % (b) == 0 ? (a) / (b) : ((a) / (b)) + 1)

void check_error (const char* message) {
	cudaError_t error = cudaGetLastError ();
	if (error != cudaSuccess) {
		printf ("CUDA error : %s, %s\n", message, cudaGetErrorString (error));
		exit(-1);
	}
}

__global__ void __launch_bounds__(256,1) curvi_1 (double * __restrict__ in_r1, double *__restrict__ in_u1, double * __restrict__ in_u2, double *__restrict__ in_u3, double * __restrict__ in_mu, double * __restrict__ in_la, double * __restrict__ in_met1, double * __restrict__ in_met2, double * __restrict__ in_met3, double * __restrict__ in_met4, double * strx, double * stry, double c1, double c2, int N) {
	//Determing the block's indices
	int blockdim_k= (int)(blockDim.x);
	int k0 = (int)(blockIdx.x)*(blockdim_k);
	int k = max (k0, 0) + (int)(threadIdx.x);
	int blockdim_j= (int)(blockDim.y);
	int j0 = (int)(blockIdx.y)*(blockdim_j);
	int j = max (j0, 0) + (int)(threadIdx.y);

	double (*u1)[304][304] = (double (*)[304][304])in_u1;
	double (*u2)[304][304] = (double (*)[304][304])in_u2;
	double (*u3)[304][304] = (double (*)[304][304])in_u3;
	double (*mu)[304][304] = (double (*)[304][304])in_mu;
	double (*la)[304][304] = (double (*)[304][304])in_la;
	double (*r1)[304][304] = (double (*)[304][304])in_r1;
	double (*met1)[304][304] = (double (*)[304][304])in_met1;
	double (*met2)[304][304] = (double (*)[304][304])in_met2;
	double (*met3)[304][304] = (double (*)[304][304])in_met3;
	double (*met4)[304][304] = (double (*)[304][304])in_met4;

	if (j>=2 & k>=2 & j<=N-3 & k<=N-3) {
		for (int i=2; i<=N-3; i++) {
double _t_21_;
double _t_153_;
double _t_150_;
double _t_162_;
double _t_156_;
double _t_16_;
double _t_134_;
double _t_173_;
double _t_192_;
double _t_189_;
double _t_46_;
double _t_201_;
double _t_195_;
double _t_41_;
double _t_170_;
double _t_34_;
double _t_182_;
double _t_176_;
double _t_29_;
double _t_131_;
double _t_9_;
double _t_143_;
double _t_137_;
double _t_4_;
double _t_177_;
double _t_118_;
double _t_100_;
double _t_196_;
double _t_81_;
double _t_127_;
double _t_63_;
double _t_138_;
double _t_157_;
double _t_132_;
double _t_74_;
double _t_56_;
double _t_111_;
double _t_93_;
double _t_129_;
double _t_151_;
double _t_148_;
double _t_171_;
double _t_168_;
double _t_190_;
double _t_187_;
double _t_144_;
double _t_86_;
double _t_68_;
double _t_123_;
double _t_142_;
double _t_105_;
double _t_163_;
double _t_161_;
double _t_183_;
double _t_181_;
double _t_202_;
double _t_200_;
double r1ic0jc0kc0 = r1[i][j][k];
double _t_113_;
double _t_58_;
double _t_76_;
double _t_95_;
double _t_117_;
double _t_90_;
double _t_122_;
double _t_110_;
double _t_99_;
double _t_104_;
double _t_92_;
double _t_51_;
double _t_62_;
double _t_53_;
double _t_67_;
double _t_55_;
double _t_80_;
double _t_85_;
double _t_73_;
double _t_10_;
double _t_0_;
double _t_22_;
double _t_35_;
double _t_47_;
double _t_17_;
double _t_14_;
double _t_42_;
double _t_39_;
double _t_30_;
double _t_27_;
double _t_5_;
double _t_2_;

_t_21_ = met1[i][j][k-2] * la[i][j][k-2] * met2[i][j][k-2];
_t_153_ = 2.0 * mu[i][j][k-2];
_t_153_ += la[i][j][k-2];
_t_150_ = met1[i][j][k-2] * _t_153_ * met2[i][j][k-2];
_t_162_ = met1[i][j][k-2] * mu[i][j][k-2] * met4[i][j][k-2];
_t_156_ = met1[i][j][k-2] * mu[i][j][k-2] * met3[i][j][k-2];
_t_16_ = met1[i][j][k-2] * mu[i][j][k-2] * met3[i][j][k-2];
_t_134_ = 2.0 * mu[i][j][k+2];
_t_134_ += la[i][j][k+2];
_t_173_ = 2.0 * mu[i][j][k+1];
_t_173_ += la[i][j][k+1];
_t_192_ = 2.0 * mu[i][j][k-1];
_t_192_ += la[i][j][k-1];
_t_189_ = met1[i][j][k-1] * _t_192_ * met2[i][j][k-1];
_t_46_ = met1[i][j][k-1] * la[i][j][k-1] * met2[i][j][k-1];
_t_201_ = met1[i][j][k-1] * mu[i][j][k-1] * met4[i][j][k-1];
_t_195_ = met1[i][j][k-1] * mu[i][j][k-1] * met3[i][j][k-1];
_t_41_ = met1[i][j][k-1] * mu[i][j][k-1] * met3[i][j][k-1];
_t_170_ = met1[i][j][k+1] * _t_173_ * met2[i][j][k+1];
_t_34_ = met1[i][j][k+1] * la[i][j][k+1] * met2[i][j][k+1];
_t_182_ = met1[i][j][k+1] * mu[i][j][k+1] * met4[i][j][k+1];
_t_176_ = met1[i][j][k+1] * mu[i][j][k+1] * met3[i][j][k+1];
_t_29_ = met1[i][j][k+1] * mu[i][j][k+1] * met3[i][j][k+1];
_t_131_ = met1[i][j][k+2] * _t_134_ * met2[i][j][k+2];
_t_9_ = met1[i][j][k+2] * la[i][j][k+2] * met2[i][j][k+2];
_t_143_ = met1[i][j][k+2] * mu[i][j][k+2] * met4[i][j][k+2];
_t_137_ = met1[i][j][k+2] * mu[i][j][k+2] * met3[i][j][k+2];
_t_4_ = met1[i][j][k+2] * mu[i][j][k+2] * met3[i][j][k+2];
_t_177_ = -c1 * u2[i-1][j][k+1];
_t_118_ = c1 * u2[i-1][j][k+1];
_t_177_ += c1 * u2[i+1][j][k+1];
_t_100_ = c1 * u2[i+1][j][k+1];
_t_118_ -= c1 * u2[i-1][j][k-1];
_t_196_ = -c1 * u2[i-1][j][k-1];
_t_100_ -= c1 * u2[i+1][j][k-1];
_t_196_ += c1 * u2[i+1][j][k-1];
_t_196_ -= c2 * u2[i-2][j][k-1];
_t_81_ = -c1 * u2[i-2][j][k-1];
_t_81_ += c1 * u2[i-2][j][k+1];
_t_177_ -= c2 * u2[i-2][j][k+1];
_t_196_ += c2 * u2[i+2][j][k-1];
_t_127_ = c1 * _t_195_ * _t_196_;
_t_63_ = -c1 * u2[i+2][j][k-1];
_t_63_ += c1 * u2[i+2][j][k+1];
_t_177_ += c2 * u2[i+2][j][k+1];
_t_127_ += c1 * _t_176_ * _t_177_;
_t_81_ += c2 * u2[i-2][j][k+2];
_t_138_ = -c2 * u2[i-2][j][k+2];
_t_118_ += c2 * u2[i-1][j][k+2];
_t_138_ -= c1 * u2[i-1][j][k+2];
_t_100_ += c2 * u2[i+1][j][k+2];
_t_138_ += c1 * u2[i+1][j][k+2];
_t_63_ += c2 * u2[i+2][j][k+2];
_t_138_ += c2 * u2[i+2][j][k+2];
_t_127_ += c2 * _t_137_ * _t_138_;
_t_81_ -= c2 * u2[i-2][j][k-2];
_t_157_ = -c2 * u2[i-2][j][k-2];
_t_118_ -= c2 * u2[i-1][j][k-2];
_t_157_ -= c1 * u2[i-1][j][k-2];
_t_100_ -= c2 * u2[i+1][j][k-2];
_t_157_ += c1 * u2[i+1][j][k-2];
_t_63_ -= c2 * u2[i+2][j][k-2];
_t_157_ += c2 * u2[i+2][j][k-2];
_t_127_ += c2 * _t_156_ * _t_157_;
_t_132_ = -c2 * u1[i-2][j][k+2];
_t_74_ = c2 * u1[i-2][j][k+2];
_t_132_ += c2 * u1[i+2][j][k+2];
_t_56_ = c2 * u1[i+2][j][k+2];
_t_132_ -= c1 * u1[i-1][j][k+2];
_t_111_ = c2 * u1[i-1][j][k+2];
_t_132_ += c1 * u1[i+1][j][k+2];
_t_93_ = c2 * u1[i+1][j][k+2];
_t_129_ = strx[i] * _t_131_ * _t_132_;
_t_127_ += c2 * _t_129_ * stry[j];
_t_74_ -= c2 * u1[i-2][j][k-2];
_t_151_ = -c2 * u1[i-2][j][k-2];
_t_111_ -= c2 * u1[i-1][j][k-2];
_t_151_ -= c1 * u1[i-1][j][k-2];
_t_93_ -= c2 * u1[i+1][j][k-2];
_t_151_ += c1 * u1[i+1][j][k-2];
_t_56_ -= c2 * u1[i+2][j][k-2];
_t_151_ += c2 * u1[i+2][j][k-2];
_t_148_ = strx[i] * _t_150_ * _t_151_;
_t_127_ += c2 * _t_148_ * stry[j];
_t_74_ += c1 * u1[i-2][j][k+1];
_t_171_ = -c2 * u1[i-2][j][k+1];
_t_111_ += c1 * u1[i-1][j][k+1];
_t_171_ -= c1 * u1[i-1][j][k+1];
_t_93_ += c1 * u1[i+1][j][k+1];
_t_171_ += c1 * u1[i+1][j][k+1];
_t_56_ += c1 * u1[i+2][j][k+1];
_t_171_ += c2 * u1[i+2][j][k+1];
_t_168_ = strx[i+2] * _t_170_ * _t_171_;
_t_127_ += c1 * _t_168_ * stry[j];
_t_74_ -= c1 * u1[i-2][j][k-1];
_t_190_ = -c2 * u1[i-2][j][k-1];
_t_111_ -= c1 * u1[i-1][j][k-1];
_t_190_ -= c1 * u1[i-1][j][k-1];
_t_93_ -= c1 * u1[i+1][j][k-1];
_t_190_ += c1 * u1[i+1][j][k-1];
_t_56_ -= c1 * u1[i+2][j][k-1];
_t_190_ += c2 * u1[i+2][j][k-1];
_t_187_ = strx[i-2] * _t_189_ * _t_190_;
_t_127_ += c1 * _t_187_ * stry[j];
_t_144_ = -c2 * u3[i-2][j][k+2];
_t_86_ = c2 * u3[i-2][j][k+2];
_t_144_ += c2 * u3[i+2][j][k+2];
_t_68_ = c2 * u3[i+2][j][k+2];
_t_144_ -= c1 * u3[i-1][j][k+2];
_t_123_ = c2 * u3[i-1][j][k+2];
_t_144_ += c1 * u3[i+1][j][k+2];
_t_142_ = _t_143_ * _t_144_;
_t_127_ += c2 * _t_142_ * stry[j];
_t_105_ = c2 * u3[i+1][j][k+2];
_t_86_ -= c2 * u3[i-2][j][k-2];
_t_163_ = -c2 * u3[i-2][j][k-2];
_t_123_ -= c2 * u3[i-1][j][k-2];
_t_163_ -= c1 * u3[i-1][j][k-2];
_t_105_ -= c2 * u3[i+1][j][k-2];
_t_163_ += c1 * u3[i+1][j][k-2];
_t_68_ -= c2 * u3[i+2][j][k-2];
_t_163_ += c2 * u3[i+2][j][k-2];
_t_161_ = _t_162_ * _t_163_;
_t_127_ += c2 * _t_161_ * stry[j];
_t_86_ += c1 * u3[i-2][j][k+1];
_t_183_ = -c2 * u3[i-2][j][k+1];
_t_123_ += c1 * u3[i-1][j][k+1];
_t_183_ -= c1 * u3[i-1][j][k+1];
_t_105_ += c1 * u3[i+1][j][k+1];
_t_183_ += c1 * u3[i+1][j][k+1];
_t_68_ += c1 * u3[i+2][j][k+1];
_t_183_ += c2 * u3[i+2][j][k+1];
_t_181_ = _t_182_ * _t_183_;
_t_127_ += c1 * _t_181_ * stry[j];
_t_86_ -= c1 * u3[i-2][j][k-1];
_t_202_ = -c2 * u3[i-2][j][k-1];
_t_123_ -= c1 * u3[i-1][j][k-1];
_t_202_ -= c1 * u3[i-1][j][k-1];
_t_105_ -= c1 * u3[i+1][j][k-1];
_t_202_ += c1 * u3[i+1][j][k-1];
_t_68_ -= c1 * u3[i+2][j][k-1];
_t_202_ += c2 * u3[i+2][j][k-1];
_t_200_ = _t_201_ * _t_202_;
_t_127_ += c1 * _t_200_ * stry[j];
r1ic0jc0kc0 += _t_127_;
_t_113_ = 2.0 * mu[i-1][j][k];
_t_58_ = 2.0 * mu[i+2][j][k];
_t_76_ = 2.0 * mu[i-2][j][k];
_t_95_ = 2.0 * mu[i+1][j][k];
_t_76_ += la[i-2][j][k];
_t_113_ += la[i-1][j][k];
_t_95_ += la[i+1][j][k];
_t_58_ += la[i+2][j][k];
_t_117_ = met1[i-1][j][k] * la[i-1][j][k] * met3[i-1][j][k];
_t_90_ = stry[j] * _t_117_ * _t_118_;
_t_122_ = met1[i-1][j][k] * la[i-1][j][k] * met4[i-1][j][k];
_t_90_ += _t_122_ * _t_123_;
_t_110_ = met1[i-1][j][k] * _t_113_ * met2[i-1][j][k];
_t_90_ += strx[i] * _t_110_ * _t_111_;
_t_99_ = met1[i+1][j][k] * la[i+1][j][k] * met3[i+1][j][k];
_t_90_ += stry[j] * _t_99_ * _t_100_;
_t_104_ = met1[i+1][j][k] * la[i+1][j][k] * met4[i+1][j][k];
_t_90_ += _t_104_ * _t_105_;
_t_92_ = met1[i+1][j][k] * _t_95_ * met2[i+1][j][k];
_t_90_ += strx[i] * _t_92_ * _t_93_;
_t_51_ = stry[j] * c1 * _t_90_;
_t_62_ = met1[i+2][j][k] * la[i+2][j][k] * met3[i+2][j][k];
_t_53_ = stry[j] * _t_62_ * _t_63_;
_t_67_ = met1[i+2][j][k] * la[i+2][j][k] * met4[i+2][j][k];
_t_53_ += _t_67_ * _t_68_;
_t_55_ = met1[i+2][j][k] * _t_58_ * met2[i+2][j][k];
_t_53_ += strx[i] * _t_55_ * _t_56_;
_t_80_ = met1[i-2][j][k] * la[i-2][j][k] * met3[i-2][j][k];
_t_53_ += stry[j] * _t_80_ * _t_81_;
_t_85_ = met1[i-2][j][k] * la[i-2][j][k] * met4[i-2][j][k];
_t_53_ += _t_85_ * _t_86_;
_t_73_ = met1[i-2][j][k] * _t_76_ * met2[i-2][j][k];
_t_53_ += strx[i] * _t_73_ * _t_74_;
_t_51_ += stry[j] * c2 * _t_53_;
r1ic0jc0kc0 += _t_51_;
_t_10_ = -c2 * u2[i][j-2][k+2];
_t_10_ -= c1 * u2[i][j-1][k+2];
_t_10_ += c1 * u2[i][j+1][k+2];
_t_10_ += c2 * u2[i][j+2][k+2];
_t_0_ = c2 * _t_9_ * _t_10_;
_t_22_ = -c2 * u2[i][j-2][k-2];
_t_22_ -= c1 * u2[i][j-1][k-2];
_t_22_ += c1 * u2[i][j+1][k-2];
_t_22_ += c2 * u2[i][j+2][k-2];
_t_0_ += c2 * _t_21_ * _t_22_;
_t_35_ = -c2 * u2[i][j-2][k+1];
_t_35_ -= c1 * u2[i][j-1][k+1];
_t_35_ += c1 * u2[i][j+1][k+1];
_t_35_ += c2 * u2[i][j+2][k+1];
_t_0_ += c1 * _t_34_ * _t_35_;
_t_47_ = -c2 * u2[i][j-2][k-1];
_t_47_ -= c1 * u2[i][j-1][k-1];
_t_47_ += c1 * u2[i][j+1][k-1];
_t_47_ += c2 * u2[i][j+2][k-1];
_t_0_ += c1 * _t_46_ * _t_47_;
_t_17_ = -c2 * u1[i][j-2][k-2];
_t_17_ -= c1 * u1[i][j-1][k-2];
_t_17_ += c1 * u1[i][j+1][k-2];
_t_17_ += c2 * u1[i][j+2][k-2];
_t_14_ = stry[j] * _t_16_ * _t_17_;
_t_0_ += c2 * _t_14_ * strx[i];
_t_42_ = -c2 * u1[i][j-2][k-1];
_t_42_ -= c1 * u1[i][j-1][k-1];
_t_42_ += c1 * u1[i][j+1][k-1];
_t_42_ += c2 * u1[i][j+2][k-1];
_t_39_ = stry[j] * _t_41_ * _t_42_;
_t_0_ += c1 * _t_39_ * strx[i];
_t_30_ = -c2 * u1[i][j-2][k+1];
_t_30_ -= c1 * u1[i][j-1][k+1];
_t_30_ += c1 * u1[i][j+1][k+1];
_t_30_ += c2 * u1[i][j+2][k+1];
_t_27_ = stry[j-2] * _t_29_ * _t_30_;
_t_0_ += c1 * _t_27_ * strx[i];
_t_5_ = -c2 * u1[i][j-2][k+2];
_t_5_ -= c1 * u1[i][j-1][k+2];
_t_5_ += c1 * u1[i][j+1][k+2];
_t_5_ += c2 * u1[i][j+2][k+2];
_t_2_ = stry[j+2] * _t_4_ * _t_5_;
_t_0_ += c2 * _t_2_ * strx[i];
r1ic0jc0kc0 += _t_0_;
r1[i][j][k] = r1ic0jc0kc0;
		} 
	}
}


__global__ void __launch_bounds__(128,4) curvi_2 (double * __restrict__ in_r1, double *__restrict__ in_u1, double * __restrict__ in_u2, double *__restrict__ in_u3, double * __restrict__ in_mu, double * __restrict__ in_la, double * __restrict__ in_met1, double * __restrict__ in_met2, double * __restrict__ in_met3, double * __restrict__ in_met4, double * strx, double * stry, double c1, double c2, int N) {
	//Determing the block's indices
	int blockdim_k= (int)(blockDim.x);
	int k0 = (int)(blockIdx.x)*(blockdim_k);
	int k = max (k0, 0) + (int)(threadIdx.x);
	int blockdim_j= (int)(blockDim.y);
	int j0 = (int)(blockIdx.y)*(blockdim_j);
	int j = max (j0, 0) + (int)(threadIdx.y);
	int blockdim_i= (int)(blockDim.z);
	int i0 = (int)(blockIdx.z)*(blockdim_i);
	int i = max (i0, 0) + (int)(threadIdx.z);

	double (*u1)[304][304] = (double (*)[304][304])in_u1;
	double (*u2)[304][304] = (double (*)[304][304])in_u2;
	double (*u3)[304][304] = (double (*)[304][304])in_u3;
	double (*mu)[304][304] = (double (*)[304][304])in_mu;
	double (*la)[304][304] = (double (*)[304][304])in_la;
	double (*r1)[304][304] = (double (*)[304][304])in_r1;
	double (*met1)[304][304] = (double (*)[304][304])in_met1;
	double (*met2)[304][304] = (double (*)[304][304])in_met2;
	double (*met3)[304][304] = (double (*)[304][304])in_met3;
	double (*met4)[304][304] = (double (*)[304][304])in_met4;

	if (j>=2 & k>=2 & j<=N-3 & k<=N-3 & i>=2 & i<=N-3) {
double _t_17_;
double _t_10_;
double _t_22_;
double _t_35_;
double _t_47_;
double _t_30_;
double _t_42_;
double _t_5_;
double _t_21_;
double _t_0_;
double _t_16_;
double _t_58_;
double _t_14_;
double _t_46_;
double _t_41_;
double _t_39_;
double _t_69_;
double _t_34_;
double _t_29_;
double _t_64_;
double _t_27_;
double _t_9_;
double _t_4_;
double _t_53_;
double _t_2_;
double r1ic0jc0kc0 = r1[i][j][k];
double _t_54_;
double _t_81_;
double _t_59_;
double _t_76_;
double _t_65_;
double _t_87_;
double _t_70_;
double _t_92_;
double _t_51_;
double _t_75_;
double _t_80_;
double _t_86_;
double _t_91_;

_t_17_ = -c2 * u1[i][j-2][k-2];
_t_17_ += c2 * u1[i][j-2][k+2];
_t_17_ -= c1 * u1[i][j-2][k-1];
_t_17_ += c1 * u1[i][j-2][k+1];
_t_10_ = -c2 * u2[i][j+2][k-2];
_t_10_ -= c1 * u2[i][j+2][k-1];
_t_10_ += c1 * u2[i][j+2][k+1];
_t_10_ += c2 * u2[i][j+2][k+2];
_t_22_ = -c2 * u2[i][j-2][k-2];
_t_22_ -= c1 * u2[i][j-2][k-1];
_t_22_ += c1 * u2[i][j-2][k+1];
_t_22_ += c2 * u2[i][j-2][k+2];
_t_35_ = -c2 * u2[i][j+1][k-2];
_t_35_ -= c1 * u2[i][j+1][k-1];
_t_35_ += c1 * u2[i][j+1][k+1];
_t_35_ += c2 * u2[i][j+1][k+2];
_t_47_ = -c2 * u2[i][j-1][k-2];
_t_47_ -= c1 * u2[i][j-1][k-1];
_t_47_ += c1 * u2[i][j-1][k+1];
_t_47_ += c2 * u2[i][j-1][k+2];
_t_30_ = -c2 * u1[i][j+1][k-2];
_t_30_ -= c1 * u1[i][j+1][k-1];
_t_30_ += c1 * u1[i][j+1][k+1];
_t_30_ += c2 * u1[i][j+1][k+2];
_t_42_ = -c2 * u1[i][j-1][k-2];
_t_42_ -= c1 * u1[i][j-1][k-1];
_t_42_ += c1 * u1[i][j-1][k+1];
_t_42_ += c2 * u1[i][j-1][k+2];
_t_5_ = -c2 * u1[i][j+2][k-2];
_t_5_ -= c1 * u1[i][j+2][k-1];
_t_5_ += c1 * u1[i][j+2][k+1];
_t_5_ += c2 * u1[i][j+2][k+2];
_t_21_ = met1[i][j-2][k] * mu[i][j-2][k] * met2[i][j-2][k];
_t_0_ = c2 * _t_21_ * _t_22_;
_t_16_ = met1[i][j-2][k] * mu[i][j-2][k] * met3[i][j-2][k];
_t_58_ = met1[i][j-2][k] * mu[i][j-2][k] * met1[i][j-2][k];
_t_14_ = stry[j] * _t_16_ * _t_17_;
_t_0_ += c2 * _t_14_ * strx[i];
_t_46_ = met1[i][j-1][k] * mu[i][j-1][k] * met2[i][j-1][k];
_t_0_ += c1 * _t_46_ * _t_47_;
_t_41_ = met1[i][j-1][k] * mu[i][j-1][k] * met3[i][j-1][k];
_t_39_ = stry[j] * _t_41_ * _t_42_;
_t_0_ += c1 * _t_39_ * strx[i];
_t_69_ = met1[i][j-1][k] * mu[i][j-1][k] * met1[i][j-1][k];
_t_34_ = met1[i][j+1][k] * mu[i][j+1][k] * met2[i][j+1][k];
_t_0_ += c1 * _t_34_ * _t_35_;
_t_29_ = met1[i][j+1][k] * mu[i][j+1][k] * met3[i][j+1][k];
_t_64_ = met1[i][j+1][k] * mu[i][j+1][k] * met1[i][j+1][k];
_t_27_ = stry[j-1] * _t_29_ * _t_30_;
_t_0_ += c1 * _t_27_ * strx[i];
_t_9_ = met1[i][j+2][k] * mu[i][j+2][k] * met2[i][j+2][k];
_t_0_ += c2 * _t_9_ * _t_10_;
_t_4_ = met1[i][j+2][k] * mu[i][j+2][k] * met3[i][j+2][k];
_t_53_ = met1[i][j+2][k] * mu[i][j+2][k] * met1[i][j+2][k];
_t_2_ = stry[j+1] * _t_4_ * _t_5_;
_t_0_ += c2 * _t_2_ * strx[i];
r1ic0jc0kc0 += _t_0_;
_t_54_ = -c2 * u2[i-2][j+2][k];
_t_81_ = c2 * u2[i-2][j+2][k];
_t_81_ -= c2 * u2[i-2][j-2][k];
_t_59_ = -c2 * u2[i-2][j-2][k];
_t_59_ += c2 * u2[i+2][j-2][k];
_t_76_ = -c2 * u2[i+2][j-2][k];
_t_54_ += c2 * u2[i+2][j+2][k];
_t_76_ += c2 * u2[i+2][j+2][k];
_t_65_ = -c2 * u2[i-2][j+1][k];
_t_81_ += c1 * u2[i-2][j+1][k];
_t_65_ += c2 * u2[i+2][j+1][k];
_t_76_ += c1 * u2[i+2][j+1][k];
_t_59_ += c1 * u2[i+1][j-2][k];
_t_87_ = -c2 * u2[i+1][j-2][k];
_t_65_ += c1 * u2[i+1][j+1][k];
_t_87_ += c1 * u2[i+1][j+1][k];
_t_54_ += c1 * u2[i+1][j+2][k];
_t_87_ += c2 * u2[i+1][j+2][k];
_t_70_ = -c2 * u2[i-2][j-1][k];
_t_81_ -= c1 * u2[i-2][j-1][k];
_t_70_ += c1 * u2[i+1][j-1][k];
_t_87_ -= c1 * u2[i+1][j-1][k];
_t_70_ += c2 * u2[i+2][j-1][k];
_t_76_ -= c1 * u2[i+2][j-1][k];
_t_59_ -= c1 * u2[i-1][j-2][k];
_t_92_ = -c2 * u2[i-1][j-2][k];
_t_51_ = c2 * _t_58_ * _t_59_;
_t_70_ -= c1 * u2[i-1][j-1][k];
_t_51_ += c1 * _t_69_ * _t_70_;
_t_92_ -= c1 * u2[i-1][j-1][k];
_t_65_ -= c1 * u2[i-1][j+1][k];
_t_51_ += c1 * _t_64_ * _t_65_;
_t_92_ += c1 * u2[i-1][j+1][k];
_t_54_ -= c1 * u2[i-1][j+2][k];
_t_51_ += c2 * _t_53_ * _t_54_;
_t_92_ += c2 * u2[i-1][j+2][k];
_t_75_ = met1[i+2][j][k] * la[i+2][j][k] * met1[i+2][j][k];
_t_51_ += c2 * _t_75_ * _t_76_;
_t_80_ = met1[i-2][j][k] * la[i-2][j][k] * met1[i-2][j][k];
_t_51_ += c2 * _t_80_ * _t_81_;
_t_86_ = met1[i+1][j][k] * la[i+1][j][k] * met1[i+1][j][k];
_t_51_ += c1 * _t_86_ * _t_87_;
_t_91_ = met1[i-1][j][k] * la[i-1][j][k] * met1[i-1][j][k];
_t_51_ += c1 * _t_91_ * _t_92_;
r1ic0jc0kc0 += _t_51_;
r1[i][j][k] = r1ic0jc0kc0;
	}
}

extern "C" void host_code (double *h_r1, double *h_u1, double *h_u2, double *h_u3,  double *h_mu, double *h_la, double *h_met1, double *h_met2, double *h_met3, double *h_met4, double *h_strx, double *h_stry, double c1, double c2, int N) {
	double *r1;
	cudaMalloc (&r1, sizeof(double)*N*N*N);
	check_error ("Failed to allocate device memory for r1\n");
	cudaMemcpy (r1, h_r1, sizeof(double)*N*N*N, cudaMemcpyHostToDevice);
	double *u1;
	cudaMalloc (&u1, sizeof(double)*N*N*N);
	check_error ("Failed to allocate device memory for u1\n");
	cudaMemcpy (u1, h_u1, sizeof(double)*N*N*N, cudaMemcpyHostToDevice);
	double *u2;
	cudaMalloc (&u2, sizeof(double)*N*N*N);
	check_error ("Failed to allocate device memory for u2\n");
	cudaMemcpy (u2, h_u2, sizeof(double)*N*N*N, cudaMemcpyHostToDevice);
	double *u3;
	cudaMalloc (&u3, sizeof(double)*N*N*N);
	check_error ("Failed to allocate device memory for u3\n");
	cudaMemcpy (u3, h_u3, sizeof(double)*N*N*N, cudaMemcpyHostToDevice);
	double *mu;
	cudaMalloc (&mu, sizeof(double)*N*N*N);
	check_error ("Failed to allocate device memory for mu\n");
	cudaMemcpy (mu, h_mu, sizeof(double)*N*N*N, cudaMemcpyHostToDevice);
	double *la;
	cudaMalloc (&la, sizeof(double)*N*N*N);
	check_error ("Failed to allocate device memory for la\n");
	cudaMemcpy (la, h_la, sizeof(double)*N*N*N, cudaMemcpyHostToDevice);
	double *met1;
	cudaMalloc (&met1, sizeof(double)*N*N*N);
	check_error ("Failed to allocate device memory for met1\n");
	cudaMemcpy (met1, h_met1, sizeof(double)*N*N*N, cudaMemcpyHostToDevice);
	double *met2;
	cudaMalloc (&met2, sizeof(double)*N*N*N);
	check_error ("Failed to allocate device memory for met2\n");
	cudaMemcpy (met2, h_met2, sizeof(double)*N*N*N, cudaMemcpyHostToDevice);
	double *met3;
	cudaMalloc (&met3, sizeof(double)*N*N*N);
	check_error ("Failed to allocate device memory for met3\n");
	cudaMemcpy (met3, h_met3, sizeof(double)*N*N*N, cudaMemcpyHostToDevice);
	double *met4;
	cudaMalloc (&met4, sizeof(double)*N*N*N);
	check_error ("Failed to allocate device memory for met4\n");
	cudaMemcpy (met4, h_met4, sizeof(double)*N*N*N, cudaMemcpyHostToDevice);
	double *strx;
	cudaMalloc (&strx, sizeof(double)*N);
	check_error ("Failed to allocate device memory for strx\n");
	cudaMemcpy (strx, h_strx, sizeof(double)*N, cudaMemcpyHostToDevice);
	double *stry;
	cudaMalloc (&stry, sizeof(double)*N);
	check_error ("Failed to allocate device memory for stry\n");
	cudaMemcpy (stry, h_stry, sizeof(double)*N, cudaMemcpyHostToDevice);

	dim3 blockconfig (16, 8);
	dim3 gridconfig (ceil(N, blockconfig.x), ceil(N, blockconfig.y), 1);
	curvi_1 <<<gridconfig, blockconfig>>> (r1, u1, u2, u3, mu, la, met1, met2, met3, met4, strx, stry, c1, c2, N);
	dim3 blockconfig_1 (16, 2, 2);
	dim3 gridconfig_1 (ceil(N, blockconfig_1.x), ceil(N, blockconfig_1.y), ceil(N, blockconfig_1.z));
	curvi_2 <<<gridconfig_1, blockconfig_1>>> (r1, u1, u2, u3, mu, la, met1, met2, met3, met4, strx, stry, c1, c2, N);

	cudaMemcpy (h_r1, r1, sizeof(double)*N*N*N, cudaMemcpyDeviceToHost);
}
